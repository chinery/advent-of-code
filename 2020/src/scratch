#include <set>
#include <iostream>
#include <vector>
#include <algorithm>
// where old ideas go to die
// this file not meant to be compiled, but #includes to make it readable without errors

/*
 * In day 10 the brute force approach obviously didn't work for part two, but was
 * able to optimise by splitting the list each time there was a number 3-apart
 * e.g.
 *     [4 5 8 9 10]
 * could be processed as
 *     [4 5] * [8 9 10]
 * 
 * This worked to get the solution, but then discovered the dp approach which is much nicer.
 */

long countConfigs(const std::set<int>& jolts, std::set<int>::iterator start, std::set<int>::iterator end) {
    if(start == end) {
        return 1;
    }
    int jolt = *start;
    long configs = countConfigs(jolts, ++start, end);

    if(start != end) {
        ++start;
        if(start != end && *start <= jolt + 3) {
            configs += countConfigs(jolts, start, end);

            ++start;
            if(start != end && *start <= jolt + 3) {
                configs += countConfigs(jolts, start, end);
            }
        }
    }
    return configs;
}

long splitSetGetConfigs(const std::set<int>& jolts) {
    std::vector<std::pair<std::set<int>::iterator, std::set<int>::iterator>> splits;

    std::set<int>::iterator start = jolts.begin();
    std::set<int>::iterator prev = jolts.begin();
    std::set<int>::iterator it = std::next(jolts.begin());

    while(it != jolts.end()) {
        if(*prev + 3 == *it){
            splits.push_back({start, it});
            start = it;
        }
        prev = it;
        ++it;
    }

    long total = 1;
    for(auto& pair : splits) {
        total *= countConfigs(jolts, pair.first, pair.second);
    }

    return total;
}


/* 
 * For day 19 decided I needed to convert the grammar to CNF and use CYK algorithm
 * Also had some serious C++ problems
 * ended up starting over from clean slate
 */

// #include "day19.hpp"
// #include "util.hpp"
// #include <iostream>

// struct CFGRule {
//     int lhs, rhs1, rhs2;
// };

// struct UnitRule {
//     int lhs;
//     int rhs;
// };

// struct TerminalRule {
//     int lhs;
//     char rhs;
// };

// class CYKTable {
// private:
//     std::vector<std::vector<std::vector<bool>>> cyk;
//     int n, r;
// public:
//     CYKTable(const int n, const int r) {
//         this->n=n; this->r=r;

//         cyk = std::vector<std::vector<std::vector<bool>>>(n, std::vector<std::vector<bool>>(n, std::vector<bool>(r)));
//     }

//     ~CYKTable() {
//         // for (int i = 0; i < n; i++)
//         // {
//         //     for (int j = 0; j < n; j++)
//         //         delete[] cyk[i][j];
//         //     delete[] cyk[i];
//         // }
//         // delete[] cyk;
//     }

//     void set(int i, int j, int k, bool val){
//         // std::cout << "set " << i << ',' << j << ',' << k << ": " << val << std::endl;
//         cyk[i-1][j-1][k] = val;
//     }

//     bool get(int i, int j, int k) {
//         // std::cout << "get " << i << ',' << j << ',' << k << std::endl;
//         return cyk[i-1][j-1][k];
//     }
// };

// Day19::Day19() : Solver("day19") {}

// bool parseString(const std::vector<CFGRule>& rules, const std::vector<TerminalRule>& terminalRules, const std::string& input, const int r) {
//     /* 
//         let the input be a string I consisting of n characters: a1 ... an.
//         let the grammar contain r nonterminal symbols R1 ... Rr, with start symbol R1.
//         let P[n,n,r] be an array of booleans. Initialize all elements of P to false.

//         for each s = 1 to n
//             for each unit production Rv → as
//                 set P[1,s,v] = true

//         for each l = 2 to n -- Length of span
//             for each s = 1 to n-l+1 -- Start of span
//                 for each p = 1 to l-1 -- Partition of span
//                     for each production Ra    → Rb Rc
//                         if P[p,s,b] and P[l-p,s+p,c] then set P[l,s,a] = true

//         if P[n,1,1] is true then
//             I is member of language
//         else
//             I is not member of language
//      */
//     const size_t n = input.length();
//     CYKTable cyk(n, r);

//     for(int s = 1; s <= n; s++){
//         for(TerminalRule rule : terminalRules) {
//             if(rule.rhs == input[s-1])
//                 cyk.set(1, s, rule.lhs, true);
//         }
//     }

//     for(int l = 2; l <= n; l++){
//         for(int s = 1; s <= n-l+1; s++) {
//             for(int p = 1; p <= l-1; p++) {
//                 for(CFGRule rule : rules) {
//                     if(cyk.get(p, s, rule.rhs1) && cyk.get(l-p, s+p, rule.rhs2))
//                         cyk.set(l, s, rule.lhs, true);
//                 }
//             }
//         }
//     }

//     return cyk.get(n, 1, 0);
// }

// std::string Day19::runPart1(const std::vector<std::string>& input) {
//     int mode = 0;
//     std::vector<CFGRule> normalRules;
//     std::vector<TerminalRule> terminalRules;
//     std::vector<UnitRule> unitRules;
//     std::vector<std::string> rhsVals;

//     int count = 0;
//     int biggestR = 0;
//     for(const auto& line : input){
//         // std::cout << line << std::endl;
//         if(line == ""){
//             for(const auto& urule : unitRules) {
//                 for(auto it = normalRules.begin(); it != normalRules.end();){
//                     auto rule = *it;
//                     if(rule.rhs1 == urule.lhs && rule.rhs2 == urule.lhs) {
//                         normalRules.push_back({rule.lhs, urule.rhs, urule.rhs});
//                     } else if (rule.rhs1 == urule.lhs) {
//                         normalRules.push_back({rule.lhs, urule.rhs, rule.rhs2});
//                     } else if (rule.rhs2 == urule.lhs) {
//                         normalRules.push_back({rule.lhs, rule.rhs1, urule.rhs});
//                     } else {
//                         ++it;
//                         continue;
//                     }
//                     it = normalRules.erase(it);
//                 }
//             }
//             mode++;

//             for(auto& rule : normalRules) {
//                 std::cout << rule.lhs << ": " << rule.rhs1 << ' ' << rule.rhs2 << std::endl;
//             }
//             std::cout << normalRules.size() << std::endl;
//         } else if(mode == 0) {
//             int colon = line.find(':');
//             int lhs = std::stoi(line.substr(0, colon));

//             if(lhs > biggestR) biggestR = lhs;

//             if(line[colon + 2] == '"') {
//                 terminalRules.push_back({lhs, line[colon + 3]});
//             } else {
//                 std::string subs = line.substr(colon + 2);
//                 rhsVals = util::split(subs, ' ');
                
//                 if(rhsVals.size() == 1) {
//                     UnitRule urule = {lhs, std::stoi(rhsVals[0])};
//                     unitRules.push_back(urule);
//                 } else if(rhsVals.size() == 3) {
//                     UnitRule urule = {lhs, std::stoi(rhsVals[0])};
//                     unitRules.push_back(urule);
//                     urule = {lhs, std::stoi(rhsVals[2])};
//                     unitRules.push_back(urule);
//                 } else {
//                     // std::cout << rule.lhs << ',' << rule.rhs1 << ',' << rule.rhs2 << std::endl;

//                     normalRules.push_back({lhs, std::stoi(rhsVals[0]), std::stoi(rhsVals[1])});

//                     if(rhsVals.size() > 2) {
//                         normalRules.push_back({lhs, std::stoi(rhsVals[3]), std::stoi(rhsVals[4])});
//                     }
//                 }
//             }
//         } else {
//             bool parsed = parseString(normalRules, terminalRules, line, biggestR+1);
//             count += parsed;
//         }
//     }

//     return std::to_string(count);
// }

// std::string Day19::runPart2(const std::vector<std::string>& input) {
//     return "";
// }